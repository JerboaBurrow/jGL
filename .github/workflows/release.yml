name: jGL release

on:
  push:
    branches: [ "main" ]
    tags:     'v*'
    paths-ignore:
      - 'doc/**'
      - '.github/**'
  workflow_dispatch:

jobs:
  linuxNative:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential xorg-dev mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev libxinerama-dev libxcursor-dev xvfb x11-apps vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools

    - name: linux-linux
      run: |
        ./build.sh -t -r -e
        mkdir linux-x86_64
        cp -r build/Examples linux-x86_64-examples
        cp build/libjGL.a linux-x86_64/libjGL-linux-x86_64.a
        mkdir headers
        cp -r include/jGL/* headers/
        cp LICENSE linux-x86_64-examples/
        cp LICENSE linux-x86_64/

    - name: Tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export DISPLAY=:99
        sudo Xvfb :99 -screen 0 800x600x24 &
        sleep 5
        MESA_GL_VERSION_OVERRIDE=3.3 ctest --exclude-regex Vulkan --extra-verbose --output-on-failure

    - name: build artifact
      uses: actions/upload-artifact@v3
      with:
        name: linux-x86_64
        path: linux-x86_64

    - name: build examples artifact
      uses: actions/upload-artifact@v3
      with:
        name: linux-x86_64-examples
        path: linux-x86_64-examples

    - name: build header artifact
      uses: actions/upload-artifact@v3
      with:
        name: headers
        path: headers
    
    
  linuxXwindows:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools

    - name: linux-X-windows
      run: |
        ./build.sh -t -w -r -e
        mkdir windows
        cp -r build/Examples windows-examples
        cp build/libjGL.a windows/libjGL-windows.a
        cp LICENSE windows-examples/
        cp LICENSE windows/
    
    - name: build artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: windows

    - name: build examples artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-examples
        path: windows-examples

  macosNative:
    runs-on: macos-11

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: 'true'

    - name: Install dependencies
      run: |
          wget https://vulkan.lunarg.com/sdk/download/1.2.189.0/mac/vulkansdk-macos-1.2.189.0.dmg
          hdiutil attach vulkansdk-macos-1.2.189.0.dmg
          mkdir ~/vulkan
          cd /Volumes/vulkansdk-macos-1.2.189.0/
          sudo ./InstallVulkan.app/Contents/macOS/InstallVulkan --root ~/vulkan --accept-licenses --default-answer --confirm-command install
          ls ~/vulkan
          cd ~/vulkan/
          python install_vulkan.py

    - name: macos-macos
      run: |
        ./build.sh -o -e -r
        mkdir macos
        cp -r build/Examples macos-examples
        cp build/libjGL.a macos/libjGL-macos.a
        cp LICENSE macos-examples/
        cp LICENSE macos/*

    - name: build artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos
        path: macos

    - name: build examples artifact
      uses: actions/upload-artifact@v3
      with:
        name: macos-examples
        path: macos-examples

  linuxRun:
    needs: linuxNative
    runs-on: ubuntu-22.04
    
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y xvfb x11-apps imagemagick

      - name: get linux build
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64-examples

      - name: launch and screenshot
        run: |
          ls
          cd Particles
          chmod +x Particles
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 800x600x24 &
          sleep 5
          MESA_GL_VERSION_OVERRIDE=3.3 ./Particles &
          export PID=$!
          sleep 10
          xwd -root -silent | convert xwd:- png:screenshot.png
          sleep 5 && kill $PID
          
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: Particles/screenshot.png

  # wineRun:
  #   needs: linuxXwindows
  #   runs-on: ubuntu-22.04
    
  #   steps:
  #     - name: Install dependencies
  #       run: sudo apt-get update && sudo apt-get install -y xvfb x11-apps imagemagick wine32 wine64

  #     - name: get linux build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: windows-examples

  #     - name: launch and screenshot
  #       run: |
  #         ls
  #         cd Particles
  #         chmod +x Particles.exe
  #         export DISPLAY=:99
  #         sudo Xvfb :99 -screen 0 800x600x24 &
  #         sleep 5
  #         MESA_GL_VERSION_OVERRIDE=3.3 wine64 Particles.exe &
  #         export PID=$!
  #         sleep 10
  #         xwd -root -silent | convert xwd:- png:screenshot.png
  #         sleep 5 && kill $PID
          
  #     - name: upload artifact
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: screenshot-wine
  #         path: Particles/screenshot.png

  release:
    needs: [linuxNative, linuxXwindows, macosNative]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-22.04
    
    steps:
      - name: get headers
        uses: actions/download-artifact@v3
        with:
          name: headers

      - name: get linux build
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64

      - name: get windows build
        uses: actions/download-artifact@v3
        with:
          name: windows

      - name: get macos build
        uses: actions/download-artifact@v3
        with:
          name: macos

      - name: pack headers
        run: |
          ls
          mkdir headers
          mv *.h headers/
          mv Display headers
          mv OpenGL headers
          mv Vulkan headers
          zip -r jGL.zip *

#     https://github.com/softprops/action-gh-release
      - name: release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          name: "release-${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          files: jGL.zip
