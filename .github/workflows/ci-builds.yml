name: ParticlesFullTestsAndRelease

on:
  push:
    branches: [ "main" ]
    tags:     'v*'
    paths-ignore:
      - 'doc/**'
      - '.github/**'
  pull_request:
  workflow_dispatch:

jobs:
  linuxXlinux:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential xorg-dev mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev libxinerama-dev libxcursor-dev xvfb x11-apps vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools

    - name: linux-linux
      run: |
        ./build.sh -t -r
        mkdir linux-x86_64
        chmod +x build/Particles
        cp build/Particles linux-x86_64/Particles-linux-x86_64 
        cp LICENSE linux-x86_64/
        cp -r resource linux-x86_64/

    - name: Tests
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: |
        export DISPLAY=:99
        sudo Xvfb :99 -screen 0 800x600x24 &
        sleep 5
        MESA_GL_VERSION_OVERRIDE=3.3 ctest --exclude-regex Vulkan --extra-verbose --output-on-failure

    - name: buildArtifact
      uses: actions/upload-artifact@v3
      with:
        name: linux-x86_64
        path: linux-x86_64
    
  linuxXwindows:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3
    
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y xorg-dev build-essential mesa-common-dev libx11-dev libxrandr-dev libgl1-mesa-dev libglu1-mesa-dev libfreetype6-dev libopenal-dev libsndfile1-dev libudev-dev g++-mingw-w64-x86-64-posix gcc-mingw-w64-x86-64-posix libxinerama-dev libxcursor-dev vulkan-tools libvulkan-dev vulkan-validationlayers-dev spirv-tools

    - name: linux-X-windows
      run: |
        ./build.sh -t -w -r
        mkdir windows
        chmod +x build/Particles.exe
        cp build/Particles.exe windows/
        cp LICENSE windows/
        cp -r resource windows/
    
    - name: buildArtifact
      uses: actions/upload-artifact@v3
      with:
        name: windows
        path: windows
      
  linuxRun:
    needs: linuxXlinux
    runs-on: ubuntu-22.04
    
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y xvfb x11-apps imagemagick

      - name: get linux build
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64

      - name: launch and screenshot
        run: |
          ls
          chmod +x Particles-linux-x86_64
          export DISPLAY=:99
          sudo Xvfb :99 -screen 0 800x600x24 &
          sleep 5
          MESA_GL_VERSION_OVERRIDE=3.3 ./Particles-linux-x86_64 &
          export PID=$!
          sleep 10
          xwd -root -silent | convert xwd:- png:screenshot.png
          sleep 5 && kill $PID
          
      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: screenshot
          path: screenshot.png

  release:
    needs: [linuxXlinux, linuxXwindows]
    if: github.ref_type == 'tag'
    runs-on: ubuntu-22.04
    
    steps:
      - name: get linux build
        uses: actions/download-artifact@v3
        with:
          name: linux-x86_64
          
      - name: get windows build
        uses: actions/download-artifact@v3
        with:
          name: windows
#     https://github.com/softprops/action-gh-release
      - name: release
        uses: softprops/action-gh-release@v1
        with:
          draft: true
          prerelease: true
          name: "release-${{ github.ref_name }}"
          tag_name: ${{ github.ref }}
          files: |
            Particles-linux-x86_64
            Particles.exe
      # - name: create release
      #   id: createRelease
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     draft: true
      #     prerelease: false
      #     release_name: "release-${{ github.ref_name }}"
      #     tag_name: ${{ github.ref }}
      
      # - name: upload linux release artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.createRelease.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: Particles-linux-x86_64
      #     asset_name: linux
      #     asset_content_type: application/zip
      #     retention-days: 30
          
      # - name: upload windows release artifact
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.createRelease.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
      #     asset_path: Particles.exe
      #     asset_name: windows
      #     asset_content_type: application/zip
      #     retention-days: 30

